<script>
var pjax = new Pjax({
  selectors: [
    'head title',
    '.page-configurations',
    '.main-inner',
    '.post-toc-wrap',
    '.languages',
    '.pjax'
  ],
  analytics: false,
  cacheBust: false,
  scrollRestoration: !CONFIG.bookmark.enable,
  scrollTo: false
});
document.addEventListener('pjax:success', () => {
  pjax.executeScripts(document.querySelectorAll('script[data-pjax], .pjax script'));
  NexT.boot.refresh();
  // Define Motion Sequence & Bootstrap Motion.
  if (CONFIG.motion.enable) {
    NexT.motion.integrator
      .init()
      .add(NexT.motion.middleWares.subMenu)
      .add(NexT.motion.middleWares.postList)
      .bootstrap();
  }
  NexT.utils.updateSidebarPosition();
});

// Create a persistent cache object for OSS page repos
if (!window.githubDataCache) {
  window.githubDataCache = {};
}

// A hook for fetching and loading data for OSS page
// Function to update project information from GitHub API
function updateProjectsFromGitHub() {
  // Check if we're on the Open Source page
  if (document.title !== "Open Source") {
    return;
  }

  const projects = document.querySelectorAll('.project');

  projects.forEach(project => {
    const githubUrl = project.getAttribute('data-repo');
    if (!githubUrl) return;

    // Construct the GitHub API URL
    const apiUrl = githubUrl.replace('https://github.com/', 'https://api.github.com/repos/');
    
    // Use project name or the full URL as a cache key
    const cacheKey = githubUrl;
    
    if (window.githubDataCache[cacheKey]) {
      // Use cached data if available
      updateProjectDOM(project, window.githubDataCache[cacheKey]);
    } else {
      // Fetch from API if not in cache
      fetch(apiUrl)
        .then(response => response.json())
        .then(data => {
          // Store in cache
          window.githubDataCache[cacheKey] = data;
          // Update DOM
          updateProjectDOM(project, data);
        })
        .catch(error => console.error('Error fetching GitHub data:', error));
    }
  });
}

// Helper function to update the DOM for a project
function updateProjectDOM(project, data) {
  // Use project name to generate IDs
  const idPrefix = data.name.toLowerCase().replace(/ /g, '-');

  const languageElement = document.getElementById(`${idPrefix}-language`);
  const starsElement = document.getElementById(`${idPrefix}-stars`);
  const forksElement = document.getElementById(`${idPrefix}-forks`);

  // Only update if elements exist
  if (languageElement) languageElement.textContent = data.language || 'N/A';
  if (starsElement) starsElement.textContent = data.stargazers_count || 0;
  if (forksElement) forksElement.textContent = data.forks_count || 0;
}

// Hook into pjax:success event
document.addEventListener('pjax:success', updateProjectsFromGitHub);

// Also run on initial page load to handle direct navigation
updateProjectsFromGitHub();
</script>
